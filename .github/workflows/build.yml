name: build
on: [push]
jobs:
  build-node:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - run: npm run build
      - name: Upload node files
        uses: actions/upload-artifact@v2
        with:
          name: tools
          path: out/compiled/*
  build-zipfile-win:
    runs-on: ubuntu-latest
    steps:
      - name: Install mingw
        run: sudo apt-get install gcc-mingw-w64
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            zipfile/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-gnu
      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target x86_64-pc-windows-gnu --manifest-path=zipfile/Cargo.toml
      - name: Show content
        run: find .
      - name: Upload library
        uses: actions/upload-artifact@v2
        with:
          name: zipfile.dll
          path: zipfile/target/x86_64-pc-windows-gnu/release/zipfile.dll
  
  build-zipfile-osx:
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            zipfile/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --manifest-path=zipfile/Cargo.toml
      - name: Show content
        run: find .
      - name: Upload library
        uses: actions/upload-artifact@v2
        with:
          name: zipfile.dylib
          path: zipfile/target/release/libzipfile.dylib
  archive:
    runs-on: ubuntu-latest
    needs: [build-node, build-zipfile-win, build-zipfile-osx]
    steps:
      - name: Download compiled js
        uses: actions/download-artifact@v2
        with:
          name: tools
      - name: Download zipfile.dll
        uses: actions/download-artifact@v2
        with:
          name: zipfile.dll
      - name: Download zipfile.dylib
        uses: actions/download-artifact@v2
        with:
          name: zipfile.dylib
      - name: Show contents
        run: find .